{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StyleKeeper from './style-keeper';\nimport resolveStyles from './resolve-styles';\nimport getRadiumStyleState from './get-radium-style-state';\nvar KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES = ['arguments', 'callee', 'caller', 'length', 'name', 'prototype', 'type'];\nvar RADIUM_PROTO = void 0;\nvar RADIUM_METHODS = void 0;\nfunction copyProperties(source, target) {\n  Object.getOwnPropertyNames(source).forEach(function (key) {\n    if (KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES.indexOf(key) < 0 && !target.hasOwnProperty(key)) {\n      var descriptor = Object.getOwnPropertyDescriptor(source, key);\n      Object.defineProperty(target, key, descriptor);\n    }\n  });\n}\n\n// Handle scenarios of:\n// - Inherit from `React.Component` in any fashion\n//   See: https://github.com/FormidableLabs/radium/issues/738\n// - There's an explicit `render` field defined\nfunction isStateless(component) {\n  var proto = component.prototype || {};\n  return !component.isReactComponent && !proto.isReactComponent && !component.render && !proto.render;\n}\n\n// Check if value is a real ES class in Native / Node code.\n// See: https://stackoverflow.com/a/30760236\nfunction isNativeClass(component) {\n  return typeof component === 'function' && /^\\s*class\\s+/.test(component.toString());\n}\n\n// Handle es7 arrow functions on React class method names by detecting\n// and transfering the instance method to original class prototype.\n// (Using a copy of the class).\n// See: https://github.com/FormidableLabs/radium/issues/738\nfunction copyArrowFuncs(enhancedSelf, ComposedComponent) {\n  RADIUM_METHODS.forEach(function (name) {\n    var thisDesc = Object.getOwnPropertyDescriptor(enhancedSelf, name);\n    var thisMethod = (thisDesc || {}).value;\n    // Only care if have instance method.\n    if (!thisMethod) {\n      return;\n    }\n    var radiumDesc = Object.getOwnPropertyDescriptor(RADIUM_PROTO, name);\n    var radiumProtoMethod = (radiumDesc || {}).value;\n    var superProtoMethod = ComposedComponent.prototype[name];\n    // Allow transfer when:\n    // 1. have an instance method\n    // 2. the super class prototype doesn't have any method\n    // 3. it is not already the radium prototype's\n    if (!superProtoMethod && thisMethod !== radiumProtoMethod) {\n      // Transfer dynamic render component to Component prototype (copy).\n      Object.defineProperty(ComposedComponent.prototype, name, thisDesc);\n      // Remove instance property, leaving us to have a contrived\n      // inheritance chain of (1) radium, (2) superclass.\n      delete enhancedSelf[name];\n    }\n  });\n}\nfunction createEnhancedComponent(origComponent, ComposedComponent, config) {\n  var _class, _temp;\n  var RadiumEnhancer = (_temp = _class = function (_ComposedComponent) {\n    _inherits(RadiumEnhancer, _ComposedComponent);\n    function RadiumEnhancer() {\n      _classCallCheck(this, RadiumEnhancer);\n      var _this = _possibleConstructorReturn(this, (RadiumEnhancer.__proto__ || Object.getPrototypeOf(RadiumEnhancer)).apply(this, arguments));\n      _this.state = _this.state || {};\n      _this.state._radiumStyleState = {};\n      _this._radiumIsMounted = true;\n      var self = _this;\n\n      // Handle es7 arrow functions on React class method\n      copyArrowFuncs(self, ComposedComponent);\n      return _this;\n    }\n    _createClass(RadiumEnhancer, [{\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (_get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this)) {\n          _get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this).call(this);\n        }\n        this._radiumIsMounted = false;\n        if (this._radiumMouseUpListener) {\n          this._radiumMouseUpListener.remove();\n        }\n        if (this._radiumMediaQueryListenersByQuery) {\n          Object.keys(this._radiumMediaQueryListenersByQuery).forEach(function (query) {\n            this._radiumMediaQueryListenersByQuery[query].remove();\n          }, this);\n        }\n      }\n    }, {\n      key: 'getChildContext',\n      value: function getChildContext() {\n        var superChildContext = _get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'getChildContext', this) ? _get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'getChildContext', this).call(this) : {};\n        if (!this.props.radiumConfig) {\n          return superChildContext;\n        }\n        var newContext = _extends({}, superChildContext);\n        if (this.props.radiumConfig) {\n          newContext._radiumConfig = this.props.radiumConfig;\n        }\n        return newContext;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var renderedElement = _get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'render', this).call(this);\n        var currentConfig = this.props.radiumConfig || this.context._radiumConfig || config;\n        if (config && currentConfig !== config) {\n          currentConfig = _extends({}, config, currentConfig);\n        }\n\n        // do the style and interaction work\n\n        var _resolveStyles = resolveStyles(this, renderedElement, currentConfig),\n          extraStateKeyMap = _resolveStyles.extraStateKeyMap,\n          element = _resolveStyles.element;\n        this._extraRadiumStateKeys = Object.keys(extraStateKeyMap);\n        return element;\n      }\n\n      /* eslint-disable react/no-did-update-set-state, no-unused-vars */\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps, prevState, snapshot) {\n        if (_get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentDidUpdate', this)) {\n          _get(RadiumEnhancer.prototype.__proto__ || Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentDidUpdate', this).call(this, prevProps, prevState, snapshot);\n        }\n        if (this._extraRadiumStateKeys && this._extraRadiumStateKeys.length > 0) {\n          var trimmedRadiumState = this._extraRadiumStateKeys.reduce(function (state, key) {\n            var extraStateKey = state[key],\n              remainingState = _objectWithoutProperties(state, [key]);\n            return remainingState;\n          }, getRadiumStyleState(this));\n          this._lastRadiumState = trimmedRadiumState;\n          this.setState({\n            _radiumStyleState: trimmedRadiumState\n          });\n        }\n      }\n      /* eslint-enable react/no-did-update-set-state, no-unused-vars */\n    }]);\n    return RadiumEnhancer;\n  }(ComposedComponent), _class._isRadiumEnhanced = true, _temp);\n\n  // Lazy infer the method names of the Enhancer.\n\n  RADIUM_PROTO = RadiumEnhancer.prototype;\n  RADIUM_METHODS = Object.getOwnPropertyNames(RADIUM_PROTO).filter(function (n) {\n    return n !== 'constructor' && typeof RADIUM_PROTO[n] === 'function';\n  });\n\n  // Class inheritance uses Object.create and because of __proto__ issues\n  // with IE <10 any static properties of the superclass aren't inherited and\n  // so need to be manually populated.\n  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-\n  copyProperties(origComponent, RadiumEnhancer);\n  if (process.env.NODE_ENV !== 'production') {\n    // This also fixes React Hot Loader by exposing the original components top\n    // level prototype methods on the Radium enhanced prototype as discussed in\n    // https://github.com/FormidableLabs/radium/issues/219.\n    copyProperties(ComposedComponent.prototype, RadiumEnhancer.prototype);\n  }\n\n  // add Radium propTypes to enhanced component's propTypes\n  if (RadiumEnhancer.propTypes && RadiumEnhancer.propTypes.style) {\n    RadiumEnhancer.propTypes = _extends({}, RadiumEnhancer.propTypes, {\n      style: PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    });\n  }\n\n  // copy display name to enhanced component\n  RadiumEnhancer.displayName = origComponent.displayName || origComponent.name || 'Component';\n\n  // handle context\n  RadiumEnhancer.contextTypes = _extends({}, RadiumEnhancer.contextTypes, {\n    _radiumConfig: PropTypes.object,\n    _radiumStyleKeeper: PropTypes.instanceOf(StyleKeeper)\n  });\n  RadiumEnhancer.childContextTypes = _extends({}, RadiumEnhancer.childContextTypes, {\n    _radiumConfig: PropTypes.object,\n    _radiumStyleKeeper: PropTypes.instanceOf(StyleKeeper)\n  });\n  return RadiumEnhancer;\n}\nfunction createComposedFromStatelessFunc(ComposedComponent, component) {\n  ComposedComponent = function (_Component) {\n    _inherits(ComposedComponent, _Component);\n    function ComposedComponent() {\n      _classCallCheck(this, ComposedComponent);\n      return _possibleConstructorReturn(this, (ComposedComponent.__proto__ || Object.getPrototypeOf(ComposedComponent)).apply(this, arguments));\n    }\n    _createClass(ComposedComponent, [{\n      key: 'render',\n      value: function render() {\n        return component(this.props, this.context);\n      }\n    }]);\n    return ComposedComponent;\n  }(Component);\n  ComposedComponent.displayName = component.displayName || component.name;\n  return ComposedComponent;\n}\nfunction createComposedFromNativeClass(ComposedComponent) {\n  ComposedComponent = function (OrigComponent) {\n    function NewComponent() {\n      // Use Reflect.construct to simulate 'new'\n      var obj = Reflect.construct(OrigComponent, arguments, this.constructor);\n      return obj;\n    }\n    // $FlowFixMe\n    Reflect.setPrototypeOf(NewComponent.prototype, OrigComponent.prototype);\n    // $FlowFixMe\n    Reflect.setPrototypeOf(NewComponent, OrigComponent);\n    return NewComponent;\n  }(ComposedComponent);\n  return ComposedComponent;\n}\nexport default function enhanceWithRadium(configOrComposedComponent) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof configOrComposedComponent !== 'function') {\n    return createFactoryFromConfig(config, configOrComposedComponent);\n  }\n  var origComponent = configOrComposedComponent;\n  var _ComposedComponent2 = origComponent;\n\n  // Radium is transpiled in npm, so it isn't really using es6 classes at\n  // runtime.  However, the user of Radium might be.  In this case we have\n  // to maintain forward compatibility with native es classes.\n  if (isNativeClass(_ComposedComponent2)) {\n    _ComposedComponent2 = createComposedFromNativeClass(_ComposedComponent2);\n  }\n\n  // Handle stateless components\n  if (isStateless(_ComposedComponent2)) {\n    _ComposedComponent2 = createComposedFromStatelessFunc(_ComposedComponent2, origComponent);\n  }\n\n  // Shallow copy composed if still original (we may mutate later).\n  if (_ComposedComponent2 === origComponent) {\n    _ComposedComponent2 = function (_ComposedComponent3) {\n      _inherits(ComposedComponent, _ComposedComponent3);\n      function ComposedComponent() {\n        _classCallCheck(this, ComposedComponent);\n        return _possibleConstructorReturn(this, (ComposedComponent.__proto__ || Object.getPrototypeOf(ComposedComponent)).apply(this, arguments));\n      }\n      return ComposedComponent;\n    }(_ComposedComponent2);\n  }\n  return createEnhancedComponent(origComponent, _ComposedComponent2, config);\n}\nfunction createFactoryFromConfig(config, configOrComposedComponent) {\n  var newConfig = _extends({}, config, configOrComposedComponent);\n  return function (configOrComponent) {\n    return enhanceWithRadium(configOrComponent, newConfig);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}